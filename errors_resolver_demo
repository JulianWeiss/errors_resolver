#!/bin/bash

export CPATH LIBRARY_PATH
export CPPFLAGS
export LDFLAGS
export LDLIBS
export LD_LIBRARY_PATH

CPPFLAGS=-Wall
[ -z "$CC" ] && CC=gcc

showv() { val=$(eval "echo \$${1}"); echo -n "$1='$val' $2"; }

fatal() { echo "Fatal error $1"; exit 1; }

(echo | python) || fatal
(echo | gcc - -E > /dev/null) || fatal

echo -e "Initial invironment\n"
# Feature substitute_paths allows to substitute long paths to shortcut variables.
export substitute_paths=d1:d2 d1=some/long/path d2=some/long/path2
showv CC $'\n'
#showv substitute_paths
#showv d1
#showv d2 $'\n'

#prepare sub library
make --quiet --always-make -C sub
echo

pass()
{
	echo -e "$1\n"
	eval "$(make --always-make $target |& tee make.tmp | ./errors_resolver.py | tee out.tmp)"
	grep -e warning: -e error: -e undefined -e cannot make.tmp
	echo -e "\nFix:"
	cat out.tmp
	echo
}

target=errors_resolver_sample

pass "pass 1: resolve headers paths"
pass "pass 2: resolve headers"
pass "pass 3: resolve libraries"
pass "pass 3: resolve library paths"

echo -e "Final compilation:\n"
make --always-make $target || fatal

if [ -e ./$target ]; then
	arch=$(echo $(file -e elf ./$target | cut -d',' -f2 | tr - _))
else
	arch=$(uname -m)
fi

echo -e "\nTest run:\n"

if [[ $arch = $(uname -m) ]];
then
	./$target
else
	echo detected architecture $arch, machine $($CC -dumpmachine)
	qemu-${arch,,} -L /usr/"$($CC -dumpmachine)" ./$target
fi

echo -e "\nFinal result:\n"
showv CPATH
showv CPPFLAGS
#showv LIBRARY_PATH
showv LDFLAGS
showv LDLIBS
echo "make -B $target"
showv LD_LIBRARY_PATH
echo ./$target
